// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dum2kt9h3aZr44s1aX13ps
// Component: v8qnaNetjuBw
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariantsoF6AQiqwAs9A } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: oF6AQiqwAs9a/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: dum2kt9h3aZr44s1aX13ps/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: v8qnaNetjuBw/css
import _513PmIcon from "./icons/PlasmicIcon___513Pm"; // plasmic-import: XivUa2XksELr/icon
import SignalIcon from "./icons/PlasmicIcon__Signal"; // plasmic-import: DAMBq6EE4q4w/icon
import BatteryIcon from "./icons/PlasmicIcon__Battery"; // plasmic-import: opci7wQKnUJL/icon
import RightIcon from "./icons/PlasmicIcon__Right"; // plasmic-import: 46wnxJ21wEbg/icon
import Messages2Icon from "./icons/PlasmicIcon__Messages2"; // plasmic-import: 23FOAOdK-8Gu/icon
import TailInIcon from "./icons/PlasmicIcon__TailIn"; // plasmic-import: 3YiI3_fqTwp1/icon
import FilledFileIconIcon from "./icons/PlasmicIcon__FilledFileIcon"; // plasmic-import: F6Kdbq4OXTFz/icon
import FilledDotsIconIcon from "./icons/PlasmicIcon__FilledDotsIcon"; // plasmic-import: uj4U6r__5iyS/icon
import FilledViewIcon2Icon from "./icons/PlasmicIcon__FilledViewIcon2"; // plasmic-import: EBiIe6Kk2o9u/icon
import LineCheckIconIcon from "./icons/PlasmicIcon__LineCheckIcon"; // plasmic-import: _y7xWEKVI8kx/icon
import LineReadIconIcon from "./icons/PlasmicIcon__LineReadIcon"; // plasmic-import: yJIed99fs9ec/icon
import UnreadIcon from "./icons/PlasmicIcon__Unread"; // plasmic-import: 6E-JNeBWJiDE/icon
import LineChatIconIcon from "./icons/PlasmicIcon__LineChatIcon"; // plasmic-import: uowQSc-_rd4r/icon
import ArrowIconIcon from "./icons/PlasmicIcon__ArrowIcon"; // plasmic-import: QTzXH8MOhLzU/icon
import ShapeIcon from "./icons/PlasmicIcon__Shape"; // plasmic-import: El7_mQU6m7as/icon
import IconHomeIcon from "./icons/PlasmicIcon__IconHome"; // plasmic-import: YCEFDz5lYGpi/icon
import IconBackIcon from "./icons/PlasmicIcon__IconBack"; // plasmic-import: NKB2UXIyHjIa/icon
import group4Eh1AViwEpaFc from "./images/group4.svg"; // plasmic-import: eh1aVIWEpaFc/picture
import avatar6FHpbUiA68V9Q from "./images/avatar6.svg"; // plasmic-import: FHpbUiA68V9q/picture
import avatar5YwmWvR8Yt9Pc from "./images/avatar5.svg"; // plasmic-import: ywmWvR8Yt9PC/picture
import avatar4Q3KMjMhPE6 from "./images/avatar4.svg"; // plasmic-import: Q3kMjMh_p_E6/picture

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsoF6AQiqwAs9A()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <div
              data-plasmic-name={"creatProfile"}
              data-plasmic-override={overrides.creatProfile}
              className={classNames(projectcss.all, sty.creatProfile)}
            >
              <div
                data-plasmic-name={"account"}
                data-plasmic-override={overrides.account}
                className={classNames(projectcss.all, sty.account)}
              >
                <div
                  data-plasmic-name={"statusBarLight"}
                  data-plasmic-override={overrides.statusBarLight}
                  className={classNames(projectcss.all, sty.statusBarLight)}
                >
                  <div
                    data-plasmic-name={"time"}
                    data-plasmic-override={overrides.time}
                    className={classNames(projectcss.all, sty.time)}
                  >
                    <div
                      data-plasmic-name={"bg"}
                      data-plasmic-override={overrides.bg}
                      className={classNames(projectcss.all, sty.bg)}
                    />

                    <_513PmIcon
                      className={classNames(projectcss.all, sty.svg___3HdUm)}
                      role={"img"}
                    />
                  </div>
                  <SignalIcon
                    className={classNames(projectcss.all, sty.svg__i79Ps)}
                    role={"img"}
                  />

                  <BatteryIcon
                    className={classNames(projectcss.all, sty.svg__hY66T)}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0LCe8
                  )}
                >
                  {
                    "\u062b\u0628\u062a \u0628\u06cc\u0645\u0627\u0631 \u062c\u062f\u06cc\u062f"
                  }
                </div>
                <div
                  data-plasmic-name={"frame4998"}
                  data-plasmic-override={overrides.frame4998}
                  className={classNames(projectcss.all, sty.frame4998)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dGrVj)}
                    displayHeight={"80px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"83.5px"}
                    loading={"lazy"}
                    src={{
                      src: group4Eh1AViwEpaFc,
                      fullWidth: 83.5,
                      fullHeight: 80,
                      aspectRatio: 1.05
                    }}
                  />
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"fName"}
                  data-plasmic-override={overrides.fName}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.fName)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"textField"}
                    data-plasmic-override={overrides.textField}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.textField)}
                  >
                    <div
                      data-plasmic-name={"content"}
                      data-plasmic-override={overrides.content}
                      className={classNames(projectcss.all, sty.content)}
                    >
                      <div
                        data-plasmic-name={"labelText"}
                        data-plasmic-override={overrides.labelText}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.labelText
                        )}
                      >
                        {"\u0646\u0627\u0645 "}
                      </div>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"textField2"}
                    data-plasmic-override={overrides.textField2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.textField2)}
                  >
                    <div
                      data-plasmic-name={"content2"}
                      data-plasmic-override={overrides.content2}
                      className={classNames(projectcss.all, sty.content2)}
                    >
                      <div
                        data-plasmic-name={"labelText2"}
                        data-plasmic-override={overrides.labelText2}
                        className={classNames(projectcss.all, sty.labelText2)}
                      >
                        <div
                          data-plasmic-name={"labelText3"}
                          data-plasmic-override={overrides.labelText3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.labelText3
                          )}
                        >
                          {
                            "\u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"
                          }
                        </div>
                      </div>
                    </div>
                  </Stack__>
                </Stack__>
                <RightIcon
                  className={classNames(projectcss.all, sty.svg__s8OpM)}
                  role={"img"}
                />
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"textField3"}
                data-plasmic-override={overrides.textField3}
                hasGap={true}
                className={classNames(projectcss.all, sty.textField3)}
              >
                <div
                  data-plasmic-name={"content3"}
                  data-plasmic-override={overrides.content3}
                  className={classNames(projectcss.all, sty.content3)}
                >
                  <div
                    data-plasmic-name={"labelText4"}
                    data-plasmic-override={overrides.labelText4}
                    className={classNames(projectcss.all, sty.labelText4)}
                  >
                    <div
                      data-plasmic-name={"labelText5"}
                      data-plasmic-override={overrides.labelText5}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.labelText5
                      )}
                    >
                      {
                        "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0628\u06cc\u0645\u0627\u0631"
                      }
                    </div>
                  </div>
                </div>
              </Stack__>
              <div
                data-plasmic-name={"group260"}
                data-plasmic-override={overrides.group260}
                className={classNames(projectcss.all, sty.group260)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"buttonLarge"}
                  data-plasmic-override={overrides.buttonLarge}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.buttonLarge)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lbKv
                    )}
                  >
                    {"\u062b\u0628\u062a \u0628\u06cc\u0645\u0627\u0631"}
                  </div>
                </Stack__>
              </div>
              <div
                data-plasmic-name={"frame4995"}
                data-plasmic-override={overrides.frame4995}
                className={classNames(projectcss.all, sty.frame4995)}
              >
                <div
                  data-plasmic-name={"vuesaxboldmessages2"}
                  data-plasmic-override={overrides.vuesaxboldmessages2}
                  className={classNames(
                    projectcss.all,
                    sty.vuesaxboldmessages2
                  )}
                >
                  <div
                    data-plasmic-name={"vuesaxboldmessages22"}
                    data-plasmic-override={overrides.vuesaxboldmessages22}
                    className={classNames(
                      projectcss.all,
                      sty.vuesaxboldmessages22
                    )}
                  >
                    <Messages2Icon
                      className={classNames(projectcss.all, sty.svg__yVr5X)}
                      role={"img"}
                    />
                  </div>
                </div>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"buttonLarge2"}
                data-plasmic-override={overrides.buttonLarge2}
                hasGap={true}
                className={classNames(projectcss.all, sty.buttonLarge2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pCuN
                  )}
                >
                  {
                    "\u062a\u06a9\u0645\u06cc\u0644 \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                  }
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"outBubble3"}
                data-plasmic-override={overrides.outBubble3}
                hasGap={true}
                className={classNames(projectcss.all, sty.outBubble3)}
              >
                <div
                  data-plasmic-name={"smartBubblePreview"}
                  data-plasmic-override={overrides.smartBubblePreview}
                  className={classNames(projectcss.all, sty.smartBubblePreview)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <TailInIcon
                      className={classNames(projectcss.all, sty.svg__eHyi)}
                      role={"img"}
                    />
                  ) : null}
                  {false ? (
                    <div
                      data-plasmic-name={"mainIn"}
                      data-plasmic-override={overrides.mainIn}
                      className={classNames(projectcss.all, sty.mainIn)}
                    />
                  ) : null}
                  <div
                    data-plasmic-name={"mainOut"}
                    data-plasmic-override={overrides.mainOut}
                    className={classNames(projectcss.all, sty.mainOut)}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"name"}
                        data-plasmic-override={overrides.name}
                        className={classNames(projectcss.all, sty.name)}
                      >
                        <div
                          data-plasmic-name={"name2"}
                          data-plasmic-override={overrides.name2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.name2
                          )}
                        >
                          {"Andrew"}
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jkeIn
                            )}
                          >
                            {"Forwarded message\nFrom Billie"}
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                    <div
                      data-plasmic-name={"message"}
                      data-plasmic-override={overrides.message}
                      className={classNames(projectcss.all, sty.message)}
                    >
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {
                          "\n\u0645\u0635\u0637\u0641\u06cc \u0627\u062d\u0645\u062f\u06cc \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0628\u0647 \u0644\u06cc\u0633\u062a \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0634\u0645\u0627\n\u0627\u0641\u0632\u0648\u062f\u0647 \u0634\u062f."
                        }
                      </div>
                    </div>
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"reply"}
                        data-plasmic-override={overrides.reply}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.reply)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame1"}
                          data-plasmic-override={overrides.frame1}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame1)}
                        >
                          <div
                            data-plasmic-name={"replyLine"}
                            data-plasmic-override={overrides.replyLine}
                            className={classNames(
                              projectcss.all,
                              sty.replyLine
                            )}
                          >
                            <div
                              data-plasmic-name={"line"}
                              data-plasmic-override={overrides.line}
                              className={classNames(projectcss.all, sty.line)}
                            />
                          </div>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"main"}
                            data-plasmic-override={overrides.main}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.main)}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"reply2"}
                              data-plasmic-override={overrides.reply2}
                              hasGap={true}
                              className={classNames(projectcss.all, sty.reply2)}
                            >
                              <div
                                data-plasmic-name={"picture"}
                                data-plasmic-override={overrides.picture}
                                className={classNames(
                                  projectcss.all,
                                  sty.picture
                                )}
                              />

                              <Stack__
                                as={"div"}
                                data-plasmic-name={"text2"}
                                data-plasmic-override={overrides.text2}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.text2
                                )}
                              >
                                <div
                                  data-plasmic-name={"title"}
                                  data-plasmic-override={overrides.title}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.title
                                  )}
                                >
                                  {"YouTube"}
                                </div>
                                <div
                                  data-plasmic-name={"subtitle"}
                                  data-plasmic-override={overrides.subtitle}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.subtitle
                                  )}
                                >
                                  {"I see you!"}
                                </div>
                              </Stack__>
                            </Stack__>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"photo"}
                          data-plasmic-override={overrides.photo}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.photo)}
                        />
                      </Stack__>
                    ) : null}
                    {false ? (
                      <div
                        data-plasmic-name={"file"}
                        data-plasmic-override={overrides.file}
                        className={classNames(projectcss.all, sty.file)}
                      >
                        <div
                          data-plasmic-name={"fileShape"}
                          data-plasmic-override={overrides.fileShape}
                          className={classNames(projectcss.all, sty.fileShape)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"icon"}
                            data-plasmic-override={overrides.icon}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.icon)}
                          >
                            <FilledFileIconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__olHqb
                              )}
                              role={"img"}
                            />
                          </Stack__>
                        </div>
                        <div
                          data-plasmic-name={"image"}
                          data-plasmic-override={overrides.image}
                          className={classNames(projectcss.all, sty.image)}
                        />

                        <Stack__
                          as={"div"}
                          data-plasmic-name={"text3"}
                          data-plasmic-override={overrides.text3}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.text3)}
                        >
                          <div
                            data-plasmic-name={"title2"}
                            data-plasmic-override={overrides.title2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.title2
                            )}
                          >
                            {"image_2021-04-07\n_13-56-34.png"}
                          </div>
                          <div
                            data-plasmic-name={"description"}
                            data-plasmic-override={overrides.description}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.description
                            )}
                          >
                            {"6.5 KB PNG"}
                          </div>
                        </Stack__>
                        <div
                          data-plasmic-name={"icon2"}
                          data-plasmic-override={overrides.icon2}
                          className={classNames(projectcss.all, sty.icon2)}
                        >
                          <FilledDotsIconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ua3P8
                            )}
                            role={"img"}
                          />
                        </div>
                      </div>
                    ) : null}
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"service"}
                        data-plasmic-override={overrides.service}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.service)}
                      >
                        {false ? (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"views"}
                            data-plasmic-override={overrides.views}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.views)}
                          >
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : false
                            ) ? (
                              <FilledViewIcon2Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__c2Xe
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              data-plasmic-name={"text4"}
                              data-plasmic-override={overrides.text4}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text4
                              )}
                            >
                              {"3,755   "}
                            </div>
                          </Stack__>
                        ) : null}
                        {false ? (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"author"}
                            data-plasmic-override={overrides.author}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.author)}
                          >
                            <div
                              data-plasmic-name={"text5"}
                              data-plasmic-override={overrides.text5}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text5
                              )}
                            >
                              {"Andrew"}
                            </div>
                          </Stack__>
                        ) : null}
                        {false ? (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"edited"}
                            data-plasmic-override={overrides.edited}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.edited)}
                          >
                            <div
                              data-plasmic-name={"text6"}
                              data-plasmic-override={overrides.text6}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text6
                              )}
                            >
                              {"edited"}
                            </div>
                          </Stack__>
                        ) : null}
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"time2"}
                          data-plasmic-override={overrides.time2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.time2)}
                        >
                          <div
                            data-plasmic-name={"text7"}
                            data-plasmic-override={overrides.text7}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text7
                            )}
                          >
                            {"6:07 AM"}
                          </div>
                        </Stack__>
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : false
                        ) ? (
                          <LineCheckIconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__r0IfD
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <LineReadIconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___73YFy
                          )}
                          role={"img"}
                        />
                      </Stack__>
                    ) : null}
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"service2"}
                      data-plasmic-override={overrides.service2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.service2)}
                    >
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"views2"}
                          data-plasmic-override={overrides.views2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.views2)}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : false
                          ) ? (
                            <FilledViewIcon2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___8Oawq
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <div
                            data-plasmic-name={"text8"}
                            data-plasmic-override={overrides.text8}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text8
                            )}
                          >
                            {"3,755   "}
                          </div>
                        </Stack__>
                      ) : null}
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"author2"}
                          data-plasmic-override={overrides.author2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.author2)}
                        >
                          <div
                            data-plasmic-name={"text9"}
                            data-plasmic-override={overrides.text9}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text9
                            )}
                          >
                            {"Andrew"}
                          </div>
                        </Stack__>
                      ) : null}
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"edited2"}
                          data-plasmic-override={overrides.edited2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.edited2)}
                        >
                          <div
                            data-plasmic-name={"text10"}
                            data-plasmic-override={overrides.text10}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text10
                            )}
                          >
                            {"edited"}
                          </div>
                        </Stack__>
                      ) : null}
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"time3"}
                        data-plasmic-override={overrides.time3}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.time3)}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={"text11"}
                            data-plasmic-override={overrides.text11}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text11
                            )}
                          >
                            {"12:06 AM"}
                          </div>
                        ) : null}
                      </Stack__>
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <LineCheckIconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___95U06
                          )}
                          role={"img"}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <LineReadIconIcon
                          className={classNames(projectcss.all, sty.svg__xOoRv)}
                          role={"img"}
                        />
                      ) : null}
                    </Stack__>
                    {false ? (
                      <div
                        data-plasmic-name={"comments"}
                        data-plasmic-override={overrides.comments}
                        className={classNames(projectcss.all, sty.comments)}
                      >
                        <div
                          data-plasmic-name={"divider"}
                          data-plasmic-override={overrides.divider}
                          className={classNames(projectcss.all, sty.divider)}
                        >
                          <div
                            data-plasmic-name={"padding"}
                            data-plasmic-override={overrides.padding}
                            className={classNames(projectcss.all, sty.padding)}
                          />

                          <div
                            data-plasmic-name={"main2"}
                            data-plasmic-override={overrides.main2}
                            className={classNames(projectcss.all, sty.main2)}
                          />
                        </div>
                        <div
                          data-plasmic-name={"main3"}
                          data-plasmic-override={overrides.main3}
                          className={classNames(projectcss.all, sty.main3)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"left"}
                            data-plasmic-override={overrides.left}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.left)}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"existingComments"}
                              data-plasmic-override={overrides.existingComments}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.existingComments
                              )}
                            >
                              <div
                                data-plasmic-name={"usersStack"}
                                data-plasmic-override={overrides.usersStack}
                                className={classNames(
                                  projectcss.all,
                                  sty.usersStack
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__o4MiK)}
                                  displayHeight={"23px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"23px"}
                                  loading={"lazy"}
                                  src={{
                                    src: avatar6FHpbUiA68V9Q,
                                    fullWidth: 23,
                                    fullHeight: 23,
                                    aspectRatio: 1
                                  }}
                                />

                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__wl361)}
                                  displayHeight={"23px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"23px"}
                                  loading={"lazy"}
                                  src={{
                                    src: avatar5YwmWvR8Yt9Pc,
                                    fullWidth: 23,
                                    fullHeight: 23,
                                    aspectRatio: 1
                                  }}
                                />

                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__ym0Ku)}
                                  displayHeight={"23px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"23px"}
                                  loading={"lazy"}
                                  src={{
                                    src: avatar4Q3KMjMhPE6,
                                    fullWidth: 23,
                                    fullHeight: 23,
                                    aspectRatio: 1
                                  }}
                                />
                              </div>
                              <div
                                data-plasmic-name={"comments2"}
                                data-plasmic-override={overrides.comments2}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.comments2
                                )}
                              >
                                {"6 comments"}
                              </div>
                              <UnreadIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___6TnUh
                                )}
                                role={"img"}
                              />
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"leaveComments"}
                              data-plasmic-override={overrides.leaveComments}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.leaveComments
                              )}
                            >
                              <LineChatIconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___9Kq5
                                )}
                                role={"img"}
                              />

                              <div
                                data-plasmic-name={"comments3"}
                                data-plasmic-override={overrides.comments3}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.comments3
                                )}
                              >
                                {"Leave comment"}
                              </div>
                            </Stack__>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"right"}
                            data-plasmic-override={overrides.right}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.right)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__qtEgR
                              )}
                            >
                              <ArrowIconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__g5XW
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                        </div>
                      </div>
                    ) : null}
                  </div>
                  <div
                    data-plasmic-name={"tailOut"}
                    data-plasmic-override={overrides.tailOut}
                    className={classNames(projectcss.all, sty.tailOut)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6XXev
                      )}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <ShapeIcon
                          className={classNames(projectcss.all, sty.svg__r9FZ7)}
                          role={"img"}
                        />
                      ) : null}
                    </div>
                  </div>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"componentHomeIndicator"}
                data-plasmic-override={overrides.componentHomeIndicator}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.componentHomeIndicator
                )}
              >
                <div
                  data-plasmic-name={"iconTasks"}
                  data-plasmic-override={overrides.iconTasks}
                  className={classNames(projectcss.all, sty.iconTasks)}
                >
                  <div
                    data-plasmic-name={"fill"}
                    data-plasmic-override={overrides.fill}
                    className={classNames(projectcss.all, sty.fill)}
                  />
                </div>
                <IconHomeIcon
                  className={classNames(projectcss.all, sty.svg__vz7Vg)}
                  role={"img"}
                />

                <IconBackIcon
                  className={classNames(projectcss.all, sty.svg___1LtJm)}
                  role={"img"}
                />
              </Stack__>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "creatProfile",
    "account",
    "statusBarLight",
    "time",
    "bg",
    "frame4998",
    "fName",
    "textField",
    "content",
    "labelText",
    "textField2",
    "content2",
    "labelText2",
    "labelText3",
    "textField3",
    "content3",
    "labelText4",
    "labelText5",
    "group260",
    "buttonLarge",
    "frame4995",
    "vuesaxboldmessages2",
    "vuesaxboldmessages22",
    "buttonLarge2",
    "outBubble3",
    "smartBubblePreview",
    "mainIn",
    "mainOut",
    "name",
    "name2",
    "message",
    "text",
    "reply",
    "frame1",
    "replyLine",
    "line",
    "main",
    "reply2",
    "picture",
    "text2",
    "title",
    "subtitle",
    "photo",
    "file",
    "fileShape",
    "icon",
    "image",
    "text3",
    "title2",
    "description",
    "icon2",
    "service",
    "views",
    "text4",
    "author",
    "text5",
    "edited",
    "text6",
    "time2",
    "text7",
    "service2",
    "views2",
    "text8",
    "author2",
    "text9",
    "edited2",
    "text10",
    "time3",
    "text11",
    "comments",
    "divider",
    "padding",
    "main2",
    "main3",
    "left",
    "existingComments",
    "usersStack",
    "comments2",
    "leaveComments",
    "comments3",
    "right",
    "tailOut",
    "componentHomeIndicator",
    "iconTasks",
    "fill"
  ],

  creatProfile: [
    "creatProfile",
    "account",
    "statusBarLight",
    "time",
    "bg",
    "frame4998",
    "fName",
    "textField",
    "content",
    "labelText",
    "textField2",
    "content2",
    "labelText2",
    "labelText3",
    "textField3",
    "content3",
    "labelText4",
    "labelText5",
    "group260",
    "buttonLarge",
    "frame4995",
    "vuesaxboldmessages2",
    "vuesaxboldmessages22",
    "buttonLarge2",
    "outBubble3",
    "smartBubblePreview",
    "mainIn",
    "mainOut",
    "name",
    "name2",
    "message",
    "text",
    "reply",
    "frame1",
    "replyLine",
    "line",
    "main",
    "reply2",
    "picture",
    "text2",
    "title",
    "subtitle",
    "photo",
    "file",
    "fileShape",
    "icon",
    "image",
    "text3",
    "title2",
    "description",
    "icon2",
    "service",
    "views",
    "text4",
    "author",
    "text5",
    "edited",
    "text6",
    "time2",
    "text7",
    "service2",
    "views2",
    "text8",
    "author2",
    "text9",
    "edited2",
    "text10",
    "time3",
    "text11",
    "comments",
    "divider",
    "padding",
    "main2",
    "main3",
    "left",
    "existingComments",
    "usersStack",
    "comments2",
    "leaveComments",
    "comments3",
    "right",
    "tailOut",
    "componentHomeIndicator",
    "iconTasks",
    "fill"
  ],

  account: [
    "account",
    "statusBarLight",
    "time",
    "bg",
    "frame4998",
    "fName",
    "textField",
    "content",
    "labelText",
    "textField2",
    "content2",
    "labelText2",
    "labelText3"
  ],

  statusBarLight: ["statusBarLight", "time", "bg"],
  time: ["time", "bg"],
  bg: ["bg"],
  frame4998: ["frame4998"],
  fName: [
    "fName",
    "textField",
    "content",
    "labelText",
    "textField2",
    "content2",
    "labelText2",
    "labelText3"
  ],

  textField: ["textField", "content", "labelText"],
  content: ["content", "labelText"],
  labelText: ["labelText"],
  textField2: ["textField2", "content2", "labelText2", "labelText3"],
  content2: ["content2", "labelText2", "labelText3"],
  labelText2: ["labelText2", "labelText3"],
  labelText3: ["labelText3"],
  textField3: ["textField3", "content3", "labelText4", "labelText5"],
  content3: ["content3", "labelText4", "labelText5"],
  labelText4: ["labelText4", "labelText5"],
  labelText5: ["labelText5"],
  group260: ["group260", "buttonLarge"],
  buttonLarge: ["buttonLarge"],
  frame4995: ["frame4995", "vuesaxboldmessages2", "vuesaxboldmessages22"],
  vuesaxboldmessages2: ["vuesaxboldmessages2", "vuesaxboldmessages22"],
  vuesaxboldmessages22: ["vuesaxboldmessages22"],
  buttonLarge2: ["buttonLarge2"],
  outBubble3: [
    "outBubble3",
    "smartBubblePreview",
    "mainIn",
    "mainOut",
    "name",
    "name2",
    "message",
    "text",
    "reply",
    "frame1",
    "replyLine",
    "line",
    "main",
    "reply2",
    "picture",
    "text2",
    "title",
    "subtitle",
    "photo",
    "file",
    "fileShape",
    "icon",
    "image",
    "text3",
    "title2",
    "description",
    "icon2",
    "service",
    "views",
    "text4",
    "author",
    "text5",
    "edited",
    "text6",
    "time2",
    "text7",
    "service2",
    "views2",
    "text8",
    "author2",
    "text9",
    "edited2",
    "text10",
    "time3",
    "text11",
    "comments",
    "divider",
    "padding",
    "main2",
    "main3",
    "left",
    "existingComments",
    "usersStack",
    "comments2",
    "leaveComments",
    "comments3",
    "right",
    "tailOut"
  ],

  smartBubblePreview: [
    "smartBubblePreview",
    "mainIn",
    "mainOut",
    "name",
    "name2",
    "message",
    "text",
    "reply",
    "frame1",
    "replyLine",
    "line",
    "main",
    "reply2",
    "picture",
    "text2",
    "title",
    "subtitle",
    "photo",
    "file",
    "fileShape",
    "icon",
    "image",
    "text3",
    "title2",
    "description",
    "icon2",
    "service",
    "views",
    "text4",
    "author",
    "text5",
    "edited",
    "text6",
    "time2",
    "text7",
    "service2",
    "views2",
    "text8",
    "author2",
    "text9",
    "edited2",
    "text10",
    "time3",
    "text11",
    "comments",
    "divider",
    "padding",
    "main2",
    "main3",
    "left",
    "existingComments",
    "usersStack",
    "comments2",
    "leaveComments",
    "comments3",
    "right",
    "tailOut"
  ],

  mainIn: ["mainIn"],
  mainOut: [
    "mainOut",
    "name",
    "name2",
    "message",
    "text",
    "reply",
    "frame1",
    "replyLine",
    "line",
    "main",
    "reply2",
    "picture",
    "text2",
    "title",
    "subtitle",
    "photo",
    "file",
    "fileShape",
    "icon",
    "image",
    "text3",
    "title2",
    "description",
    "icon2",
    "service",
    "views",
    "text4",
    "author",
    "text5",
    "edited",
    "text6",
    "time2",
    "text7",
    "service2",
    "views2",
    "text8",
    "author2",
    "text9",
    "edited2",
    "text10",
    "time3",
    "text11",
    "comments",
    "divider",
    "padding",
    "main2",
    "main3",
    "left",
    "existingComments",
    "usersStack",
    "comments2",
    "leaveComments",
    "comments3",
    "right"
  ],

  name: ["name", "name2"],
  name2: ["name2"],
  message: ["message", "text"],
  text: ["text"],
  reply: [
    "reply",
    "frame1",
    "replyLine",
    "line",
    "main",
    "reply2",
    "picture",
    "text2",
    "title",
    "subtitle",
    "photo"
  ],

  frame1: [
    "frame1",
    "replyLine",
    "line",
    "main",
    "reply2",
    "picture",
    "text2",
    "title",
    "subtitle"
  ],

  replyLine: ["replyLine", "line"],
  line: ["line"],
  main: ["main", "reply2", "picture", "text2", "title", "subtitle"],
  reply2: ["reply2", "picture", "text2", "title", "subtitle"],
  picture: ["picture"],
  text2: ["text2", "title", "subtitle"],
  title: ["title"],
  subtitle: ["subtitle"],
  photo: ["photo"],
  file: [
    "file",
    "fileShape",
    "icon",
    "image",
    "text3",
    "title2",
    "description",
    "icon2"
  ],

  fileShape: ["fileShape", "icon"],
  icon: ["icon"],
  image: ["image"],
  text3: ["text3", "title2", "description"],
  title2: ["title2"],
  description: ["description"],
  icon2: ["icon2"],
  service: [
    "service",
    "views",
    "text4",
    "author",
    "text5",
    "edited",
    "text6",
    "time2",
    "text7"
  ],

  views: ["views", "text4"],
  text4: ["text4"],
  author: ["author", "text5"],
  text5: ["text5"],
  edited: ["edited", "text6"],
  text6: ["text6"],
  time2: ["time2", "text7"],
  text7: ["text7"],
  service2: [
    "service2",
    "views2",
    "text8",
    "author2",
    "text9",
    "edited2",
    "text10",
    "time3",
    "text11"
  ],

  views2: ["views2", "text8"],
  text8: ["text8"],
  author2: ["author2", "text9"],
  text9: ["text9"],
  edited2: ["edited2", "text10"],
  text10: ["text10"],
  time3: ["time3", "text11"],
  text11: ["text11"],
  comments: [
    "comments",
    "divider",
    "padding",
    "main2",
    "main3",
    "left",
    "existingComments",
    "usersStack",
    "comments2",
    "leaveComments",
    "comments3",
    "right"
  ],

  divider: ["divider", "padding", "main2"],
  padding: ["padding"],
  main2: ["main2"],
  main3: [
    "main3",
    "left",
    "existingComments",
    "usersStack",
    "comments2",
    "leaveComments",
    "comments3",
    "right"
  ],

  left: [
    "left",
    "existingComments",
    "usersStack",
    "comments2",
    "leaveComments",
    "comments3"
  ],

  existingComments: ["existingComments", "usersStack", "comments2"],
  usersStack: ["usersStack"],
  comments2: ["comments2"],
  leaveComments: ["leaveComments", "comments3"],
  comments3: ["comments3"],
  right: ["right"],
  tailOut: ["tailOut"],
  componentHomeIndicator: ["componentHomeIndicator", "iconTasks", "fill"],
  iconTasks: ["iconTasks", "fill"],
  fill: ["fill"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    creatProfile: makeNodeComponent("creatProfile"),
    account: makeNodeComponent("account"),
    statusBarLight: makeNodeComponent("statusBarLight"),
    time: makeNodeComponent("time"),
    bg: makeNodeComponent("bg"),
    frame4998: makeNodeComponent("frame4998"),
    fName: makeNodeComponent("fName"),
    textField: makeNodeComponent("textField"),
    content: makeNodeComponent("content"),
    labelText: makeNodeComponent("labelText"),
    textField2: makeNodeComponent("textField2"),
    content2: makeNodeComponent("content2"),
    labelText2: makeNodeComponent("labelText2"),
    labelText3: makeNodeComponent("labelText3"),
    textField3: makeNodeComponent("textField3"),
    content3: makeNodeComponent("content3"),
    labelText4: makeNodeComponent("labelText4"),
    labelText5: makeNodeComponent("labelText5"),
    group260: makeNodeComponent("group260"),
    buttonLarge: makeNodeComponent("buttonLarge"),
    frame4995: makeNodeComponent("frame4995"),
    vuesaxboldmessages2: makeNodeComponent("vuesaxboldmessages2"),
    vuesaxboldmessages22: makeNodeComponent("vuesaxboldmessages22"),
    buttonLarge2: makeNodeComponent("buttonLarge2"),
    outBubble3: makeNodeComponent("outBubble3"),
    smartBubblePreview: makeNodeComponent("smartBubblePreview"),
    mainIn: makeNodeComponent("mainIn"),
    mainOut: makeNodeComponent("mainOut"),
    _name: makeNodeComponent("name"),
    name2: makeNodeComponent("name2"),
    message: makeNodeComponent("message"),
    text: makeNodeComponent("text"),
    reply: makeNodeComponent("reply"),
    frame1: makeNodeComponent("frame1"),
    replyLine: makeNodeComponent("replyLine"),
    line: makeNodeComponent("line"),
    main: makeNodeComponent("main"),
    reply2: makeNodeComponent("reply2"),
    picture: makeNodeComponent("picture"),
    text2: makeNodeComponent("text2"),
    title: makeNodeComponent("title"),
    subtitle: makeNodeComponent("subtitle"),
    photo: makeNodeComponent("photo"),
    file: makeNodeComponent("file"),
    fileShape: makeNodeComponent("fileShape"),
    icon: makeNodeComponent("icon"),
    image: makeNodeComponent("image"),
    text3: makeNodeComponent("text3"),
    title2: makeNodeComponent("title2"),
    description: makeNodeComponent("description"),
    icon2: makeNodeComponent("icon2"),
    service: makeNodeComponent("service"),
    views: makeNodeComponent("views"),
    text4: makeNodeComponent("text4"),
    author: makeNodeComponent("author"),
    text5: makeNodeComponent("text5"),
    edited: makeNodeComponent("edited"),
    text6: makeNodeComponent("text6"),
    time2: makeNodeComponent("time2"),
    text7: makeNodeComponent("text7"),
    service2: makeNodeComponent("service2"),
    views2: makeNodeComponent("views2"),
    text8: makeNodeComponent("text8"),
    author2: makeNodeComponent("author2"),
    text9: makeNodeComponent("text9"),
    edited2: makeNodeComponent("edited2"),
    text10: makeNodeComponent("text10"),
    time3: makeNodeComponent("time3"),
    text11: makeNodeComponent("text11"),
    comments: makeNodeComponent("comments"),
    divider: makeNodeComponent("divider"),
    padding: makeNodeComponent("padding"),
    main2: makeNodeComponent("main2"),
    main3: makeNodeComponent("main3"),
    left: makeNodeComponent("left"),
    existingComments: makeNodeComponent("existingComments"),
    usersStack: makeNodeComponent("usersStack"),
    comments2: makeNodeComponent("comments2"),
    leaveComments: makeNodeComponent("leaveComments"),
    comments3: makeNodeComponent("comments3"),
    right: makeNodeComponent("right"),
    tailOut: makeNodeComponent("tailOut"),
    componentHomeIndicator: makeNodeComponent("componentHomeIndicator"),
    iconTasks: makeNodeComponent("iconTasks"),
    fill: makeNodeComponent("fill"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
